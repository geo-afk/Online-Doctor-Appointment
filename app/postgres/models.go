// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package postgres

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ApStatus string

const (
	ApStatusNone      ApStatus = "None"
	ApStatusBooked    ApStatus = "Booked"
	ApStatusResolved  ApStatus = "Resolved"
	ApStatusCancelled ApStatus = "Cancelled"
)

func (e *ApStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApStatus(s)
	case string:
		*e = ApStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ApStatus: %T", src)
	}
	return nil
}

type NullApStatus struct {
	ApStatus ApStatus
	Valid    bool // Valid is true if ApStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ApStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApStatus), nil
}

type MedicalStatus string

const (
	MedicalStatusOngoing   MedicalStatus = "Ongoing"
	MedicalStatusRecovered MedicalStatus = "Recovered"
	MedicalStatusNone      MedicalStatus = "None"
)

func (e *MedicalStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MedicalStatus(s)
	case string:
		*e = MedicalStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MedicalStatus: %T", src)
	}
	return nil
}

type NullMedicalStatus struct {
	MedicalStatus MedicalStatus
	Valid         bool // Valid is true if MedicalStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMedicalStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MedicalStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MedicalStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMedicalStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MedicalStatus), nil
}

type URole string

const (
	URolePatient URole = "patient"
	URoleDoctor  URole = "doctor"
)

func (e *URole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = URole(s)
	case string:
		*e = URole(s)
	default:
		return fmt.Errorf("unsupported scan type for URole: %T", src)
	}
	return nil
}

type NullURole struct {
	URole URole
	Valid bool // Valid is true if URole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullURole) Scan(value interface{}) error {
	if value == nil {
		ns.URole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.URole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullURole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.URole), nil
}

type Address struct {
	ID      int32
	Street  pgtype.Text
	City    pgtype.Text
	State   pgtype.Text
	Country pgtype.Text
	Zip     pgtype.Text
}

type Allergy struct {
	ID          int32
	Description pgtype.Text
	Reaction    pgtype.Text
	Severity    pgtype.Text
}

type Appointment struct {
	ID                int32
	UserID            int32
	Reason            string
	BookedAt          pgtype.Timestamp
	AppointmentStatus NullApStatus
	CreatedAt         pgtype.Timestamp
}

type Auth struct {
	UserID   int32
	UserName string
	Password string
}

type ContactDetail struct {
	ID              int32
	PrimaryNumber   pgtype.Text
	SecondaryNumber pgtype.Text
	Email           pgtype.Text
}

type Doctor struct {
	ID                int32
	Specialty         string
	Experience        int32
	Note              pgtype.Text
	AppointmentStatus NullApStatus
	IsAvailable       pgtype.Bool
	AppointmentCount  pgtype.Int4
	CreatedAt         pgtype.Timestamp
}

type MedicalHistory struct {
	ID            int32
	PatientID     pgtype.Int4
	Description   pgtype.Text
	DiagnosedDate pgtype.Timestamp
	Status        NullMedicalStatus
	Medication    pgtype.Int4
	Allergies     pgtype.Int4
	Surgeries     pgtype.Int4
}

type MedicationHistory struct {
	ID          int32
	Description pgtype.Text
	Dosage      pgtype.Text
	Frequency   pgtype.Int4
	StartDate   pgtype.Timestamp
	EndDate     pgtype.Timestamp
}

type Patient struct {
	ID               int32
	AppointmentID    pgtype.Int4
	CreatedAt        pgtype.Timestamp
	MedicalHistoryID pgtype.Int4
}

type Payment struct {
	ID        int32
	PatientID int32
	DoctorID  int32
	Amount    float32
}

type Request struct {
	ID          pgtype.Int4
	RequestType string
	Token       string
	UserEmail   string
	ExpiresAt   pgtype.Timestamp
}

type Session struct {
	ID           string
	UserID       int32
	UserRole     URole
	RefreshToken string
	IsRevoked    bool
	CreatedAt    pgtype.Timestamp
	ExpiresAt    pgtype.Timestamp
}

type Surgery struct {
	ID          int32
	Description pgtype.Text
	DateDone    pgtype.Timestamp
	Hospital    pgtype.Text
}

type User struct {
	ID               int32
	FirstName        string
	LastName         string
	Location         pgtype.Text
	UserRole         URole
	ContactID        pgtype.Int4
	EmergencyContact pgtype.Int4
	CreatedAt        pgtype.Timestamp
}
